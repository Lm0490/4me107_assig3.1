{
  "name": "ebay-api",
  "description": "eBay API Client",
  "version": "0.1.1",
  "homepage": "https://github.com/newleafdigital/nodejs-ebay-api",
  "author": {
    "name": "Ben Buckman",
    "email": "ben@newleafdigital.com",
    "url": "http://newleafdigital.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/newleafdigital/nodejs-ebay-api.git"
  },
  "main": "index.js",
  "dependencies": {
    "async": "~0.1.22",
    "restler": "~2.0.1",
    "underscore": "~1.3.3",
    "xml": "0.0.7",
    "xml2js": "~0.1.14"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": ">= 0.6"
  },
  "readme": "eBay API client for Node.js\n===============\n\n## Background\n\nThis was built to power the \"eBay Picks\" section of [AntiquesNearMe.com](http://antiquesnearme.com). It can currently query the FindingService, MerchandisingService, and Shopping API via JSON-GET requests, and the Trading API via XML-POST. Other services can be added as needed. (Pull requests welcome!)\n\n## To use\n\n`npm install ebay-api`\n\n`var ebay = require('ebay-api');`\n\n(See the examples)\n\n\n## A word on the eBay APIs\n\neBay has an enormous collection of APIs built over the years. Enter the labyrinth here: [http://developer.ebay.com](http://developer.ebay.com) or here: [https://www.x.com/developers/ebay/products](https://www.x.com/developers/ebay/products)\n\nSign up for an API key here: [https://publisher.ebaypartnernetwork.com/PublisherToolsAPI](https://publisher.ebaypartnernetwork.com/PublisherToolsAPI)\n(You'll need a key to run the examples.)\n\nMake sure to obey the eBay API [License](http://developer.ebay.com/join/licenses/individual/) and [Terms](https://www.x.com/developers/ebay/programs/affiliates/terms) when using this library.\n\n\n## Why use Node.js to do this?\n\nNode.js is great at running HTTP requests asynchronously. If each request takes 5 seconds to run and 5 seconds to parse, for example, dozens of requests can run in parallel and only take 10 seconds total, instead of 10 seconds for each. (This module uses [restler](https://github.com/danwrong/restler) for the HTTP handling and the [async](https://github.com/caolan/async) library for flow control.)\n\nNode.js speaks JSON natively, so the response data from the JSON APIs can be very easily parsed in code, or dumped into MongoDB.\n\nJavascript is a little insane and a lot of fun.\n\n\n## Methods\n\n### `ebayApiGetRequest(options, callback)`\n\nMake an individual request to a GET service.\n`options` must contain:\n\n- serviceName: e.g. 'FindingService'\n- opType: e.g. 'findItemsAdvanced'\n- appId: your eBay API application ID\n\nand can optionally contain:\n\n- params: (see examples and API documentation)\n- filters: (see examples and API documentation)\n- reqOptions: passed to the request, e.g. with custom headers\n- parser: function which takes the response data and extracts items (or other units depending on the query). Defaults to `parseItemsFromResponse`. To return the raw data, pass in a function like `function(data, callback) { callback(null, data); }`.\n- sandbox: true/false (default false = production). May need to add additional endpoint URLs to the code as needed.\n\n`callback` gets `(error, items)` or `(error, data)` depending on the parser.\n\n\n### `paginateGetRequest(options, callback)`\n\nMake a multi-page request to a GET service, running them in parallel and combining the results.\n\n`options` contains the same parameters as `ebayApiGetRequest`, plus:\n\n- pages: # of pages to query\n- perPage: items per page\n\n`parser` here needs to return an array, so the results can be concatenated and passed to `callback`.\n\nNote: Because the pages all run in parallel, they can cause spikes on CPU and network activity. In the future, I might switch this to using an [async](https://github.com/caolan/async) `queue` (instead of `forEach`) with a variable concurrency. (A `forEachSeries` can also be used, but negates the purpose of running the requests asynchronously.)\n\n`callback` gets `(error, items)`\n\n\n### `parseItemsFromResponse(data, callback)`\n\nDefault parser, takes the response from an API request and parses items or other units per request type.\nEach response type is a little different, so this needs to be built out further.\nIs used as the default `parser` option for `paginateGetRequest`.\n\n`callback` gets `(error, items)` where `items` are the items parsed from `data`.\n\n\n### `ebayApiPostXmlRequest(options, callback)`\n\nMake an individual request to a POST-XML service.\n`options` must contain:\n\n- serviceName: e.g. 'FindingService'\n- opType: e.g. 'findItemsAdvanced'\n\nand can optionally contain:\n\n- (for authentication)\n  - devName\n  - cert\n  - appName\n\n- params (for the XML input)\n  - (Note: for `GetCategories` and possibly other services, pass the auth token as `params.authToken`, not `RequesterCredentials.eBayAuthToken` as indicated in the API documentation.)\n  - See `buildXmlInput()` for ways to structure this.\n\n- reqOptions: headers and other options to pass to the request\n  - IMPT: Some parameters for these endpoints, such as _SITE-ID_ and _authToken_, should go into the headers, not into `params`. See the API documentation.\n- sandbox: true/false (default false = production). May need to add additional endpoint URLs to the code as needed.\n- rawXml: boolean. If `true`, passes the raw XML response back to callback. `false` means XML is converted to JSON (for consistency with other APIs). Default is `false`/JSON.\n\n`callback` gets `(error, data)`. (There is not currently a default parser for these endpoints.)\n\n\n## Helpers\n\n### `flatten(obj)`\n\nSimplifies the JSON format of the API responses:\n\n- Single-element arrays and objects are flatted to their key:value pair.\n- The structure of the format `{ @key:KEY, __value__:VALUE }` is flattened to its key:value pair.\n\nIts purpose is to make the data easier to handle in code, and to model/query in MongoDB.\n\nRuns synchronously, returns flattened object.\n\n\n### `ItemFilter(name, value, paramName, paramValue)`\n\nA class constructor to simplify creating filters. (See the examples)\n\n\n### `checkAffiliateUrl(url)`\n\nIf you want your affiliate codes included in returned items (see the examples for how to do that), use this to verify that the URLs are of the right format.\ne.g. `checkAffiliateUrl(item.viewItemURL)`\n\nReturns boolean.\n\n\n### `getLatestApiVersions(callback)`\n\nGet the version numbers of the APIs that make their version available.\n\n\n## Examples\n\nSee the /examples directory. There are two examples, one with a single-page `findItemsByKeywords` request, the other a paginated `findItemsAdvanced` request. It should be reasonably apparent from the examples how these functions are used.\nTo run the examples, you need to add your own app key (I don't want my keys to be disabled for abuse!) - you can get one [here](https://publisher.ebaypartnernetwork.com/PublisherToolsAPI).\n\n\n## Possible Roadmap\n\n1. Add more services and generally expand the functionality.\n2. Add more links related to relevant eBay documentation.\n3. Add a generic [Mongoose](http://mongoosejs.com) model. (Mine is currently too filled with custom business logic to be included.)\n4. Switch from `async.forEach` to `async.queue` for more fine-grained concurrency control.\n5. Suggestions...?\n\n\n## Credits\n\nCreated by Ben Buckman of [New Leaf Digital](http://newleafdigital.com), an independent dev/consulting shop specializing in Node.js, Drupal, mapping, system architecture, and general \"full stack\" development. Ben writes a [dev blog](http://benbuckman.net) about Node.js and many other subjects.\n\nBen's other hat is co-founder and CTO of [Antiques Near Me](http://antiquesnearme.com), and this library was created for use there.\n\nEnjoy!\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/newleafdigital/nodejs-ebay-api/issues"
  },
  "_id": "ebay-api@0.1.1",
  "dist": {
    "shasum": "342d1408a737066c83f3a3a795bde8d9b60388c0"
  },
  "_from": "ebay-api@",
  "_resolved": "https://registry.npmjs.org/ebay-api/-/ebay-api-0.1.1.tgz"
}
